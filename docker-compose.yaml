version: "3.8"

services:
  ingress:
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - 80:80
    networks:
      - event-network
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

  reservation:
    build:
      context: ./reservation
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - event-network
    volumes:
      - ./reservation:/app
    ports:
      - 3000
    environment:
      NODE_ENV: development
      VIRTUAL_HOST: reservation.localhost
    command: npm run start:watch
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "reservation.host.docker.internal:host-gateway"

  payment:
    build:
      context: ./payment
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - event-network
    volumes:
      - ./payment:/app
    ports:
      - 3000
    environment:
      NODE_ENV: development
      VIRTUAL_HOST: payment.localhost
    command: npm run start:watch
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "payment.host.docker.internal:host-gateway"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks:
      - event-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICKET_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"

  broker:
    image: confluentinc/cp-kafka:latest
    restart: on-failure
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - event-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"

  schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: schema-registry
    depends_on:
      - zookeeper
      - broker
    networks:
      - event-network
    ports:
      - "8087:8087"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:9092
      SCHEMA_REGISTRY_DEBUG: "true"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    container_name: control-center
    depends_on:
      - broker
    ports:
      - "9021:9021"
    networks:
      - event-network
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:9092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_CONNECT_CLUSTER: "broker:9092"
      CONTROL_CENTER_KSQL_URL: http://ksqldb-server:80888
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    container_name: ksqldb-server
    image: confluentinc/cp-ksqldb-server:7.4.0
    hostname: ksqldb-server
    depends_on:
      - broker
      - control-center
    networks:
      - event-network
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: "broker:9092"

  db-reservation:
    container_name: db-reservation
    image: postgres:latest
    environment:
      POSTGRES_DB: reservation
      POSTGRES_USER: reservation
      POSTGRES_PASSWORD: reservation
    networks:
      - event-network
    ports:
      - "5432:5432"
    volumes:
      - ./db/reservation:/var/lib/postgresql/data

  db-payment:
    container_name: db-payment
    image: postgres:latest
    environment:
      POSTGRES_DB: payment
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: payment
    networks:
      - event-network
    expose:
      - "5433"
    ports:
      - "5433:5433"
    volumes:
      - ./db/payment:/var/lib/postgresql/data
    command: -p 5433

  cache:
    container_name: cache
    image: redislabs/redismod
    restart: always
    ports:
      - "6379:6379"
    networks:
      - event-network

  elasticsearch:
    labels:
      com.example.service: "elasticsearch"
      com.example.description: "For searching and indexing data"
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    restart: always
    networks:
      - event-network
    environment:
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - DOCKER_DEFAULT_PLATFORM=linux/amd64
      - discovery.type=single-node
      - bootstrap.system_call_filter=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./elk/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  logstash:
    labels:
      com.example.service: "logstash"
      com.example.description: "For logging data"
    image: docker.elastic.co/logstash/logstash:7.15.0
    container_name: logstash
    restart: always
    networks:
      - event-network
    environment:
      - DOCKER_DEFAULT_PLATFORM=linux/amd64
      - pipeline.ecs_compatibility=disabled
    volumes:
      - ./elk/logstash:/logstash_dir
    command: logstash -f /logstash_dir/logstash.conf
    depends_on:
      - elasticsearch
    ports:
      - "5959:5959"

  kibana:
    labels:
      com.example.service: "kibana"
      com.example.description: "Data visualization and for log aggregation"
    image: docker.elastic.co/kibana/kibana:7.15.0
    restart: always
    container_name: kibana
    networks:
      - event-network
    environment:
      - DOCKER_DEFAULT_PLATFORM=linux/amd64
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

networks:
  event-network:
    name: event-network
    driver: "bridge"

volumes:
  esdata:
    driver: local
